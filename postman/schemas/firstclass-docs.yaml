openapi: '3.0.0'
info:
  version: '0.0.1'
  title: 'sa-firstclass'
  description: 'hello'

servers:
  - url: http://localhost:5000/api
    description: local production environment
  - url: https://sa-firstclass-backend-production.up.railway.app/api
    description: Deployed production environment

paths:
  /auth/user:
    post:
      summary: Register a user
      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Bad Request

  /auth/user/login:
    post:
      summary: Log in as a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Bad Request

  /auth/staff:
    post:
      summary: Register a staff member
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Staff'
      responses:
        '201':
          description: Staff member registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  staff:
                    $ref: '#/components/schemas/Staff'
        '400':
          description: Bad Request

  /auth/staff/login:
    post:
      summary: Log in as a staff member
      requestBody:
        required: true
        content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  staff:
                    $ref: '#/components/schemas/Staff'
      responses:
        '200':
          description: Staff member logged in successfully
        '400':
          description: Bad Request

  /product:
    post:
      summary: Add a product to a flight
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewProduct'
      responses:
        '201':
          description: Product added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Bad Request

    get:
      summary: Get a list of all products
      responses:
        '200':
          description: List of products
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductList'

  /product/{id}:
    get:
      summary: Get a product by ID
      parameters:
        - name: id
          in: path
          description: ID of the product
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Product found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
  
  /order:
    post:
      summary: Create a new order
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewOrder'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Bad Request

    get:
      summary: Get all orders
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderList'
        '400':
          description: Bad Request

  /order/checkout:
    post:
      summary: Perform checkout with an order
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewOrder'
      responses:
        '200':
          description: Checkout successful wow
        '400':
          description: Bad Request

  /order/sales:
    get:
      summary: Get orders of the authenticated customer
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of customer orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderList'
        '400':
          description: Bad Request

components:
  schemas:
    User:
      type: object
      properties:
        surname:
          type: string
        flightNumber:
          type: string
        seatNumber:
          type: string
      required:
        - surname
        - flightNumber
        - seatNumber

    Staff:
      type: object
      properties:
        staffId:
          type: string
        flightId:
          type: string
      required:
        - staffId
        - flightId
    
    Product:
      allOf:
        - $ref: '#/components/schemas/NewProduct'
        - type: object
          required:
            - id
          properties:
            id:
              type: string
    
    NewProduct:
      type: object
      properties:
        name:
          type: string
        category:
          type: string
          enum: 
            - food and beverage
            - amenities
        description:
          type: string
        ingredients:
          type: string
        allergens:
          type: string
          enum:
            - dairy
            - egg
            - nut
            - fish
        imageUrl:
          type: string
        price:
          type: number
        flightNumber:
          type: string
        availability:
          type: number
      required:
        - name
        - description
        - ingredients
        - allergens
        - image
        - price
        - flightNumber
        - availability

    ProductList:
      type: array
      items:
        $ref: '#/components/schemas/Product'
    
    Order:
      allOf:
        - $ref: '#/components/schemas/NewOrder'
        - $ref: '#/components/schemas/User'
        - type: object
          required:
            - id
            - status
          properties:
            id:
              type: string
            status:
              type: string
    
    NewOrder:
      type: object
      properties:
        orderDateTime:
          type: string
          format: date-time
        products:
          type: array
          items:
            $ref: '#/components/schemas/OrderedProduct'
      required:
        - orderDateTime
        - products

    OrderedProduct:
      type: object
      properties:
        productId:
          type: string
        quantity:
          type: integer
      required:
        - productId
        - quantity

    OrderList:
      type: array
      items:
        $ref: '#/components/schemas/Order'

  securitySchemes:
      bearerAuth:
        type: http
        scheme: bearer
        bearerFormat: JWT

